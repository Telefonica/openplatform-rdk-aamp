# If not stated otherwise in this file or this component's license file the
# following copyright and licenses apply:
#
# Copyright 2018 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
cmake_minimum_required (VERSION 2.6)
project (AAMP)
#find_package(GStreamer 1.4 REQUIRED)
#add_subdirectory(jsbindings)
find_package(PkgConfig REQUIRED)

if(NOT CMAKE_USE_GST_0.10)
	message("CMAKE_USE_GST_0.10 not set, use gstreamer-1.0")
	pkg_check_modules(GSTREAMER REQUIRED gstreamer-1.0)
	pkg_check_modules(GSTREAMERBASE REQUIRED gstreamer-app-1.0)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_GST1")
else()
	message("CMAKE_USE_GST_0.10 set, use gstreamer-0.10")
	pkg_check_modules(GSTREAMER REQUIRED gstreamer-0.10)
	pkg_check_modules(GSTREAMERBASE REQUIRED gstreamer-app-0.10)
endif()
pkg_check_modules(CURL REQUIRED libcurl)
pkg_check_modules(LibXml2 REQUIRED libxml-2.0)
pkg_check_modules(LIBDASH REQUIRED libdash)
pkg_check_modules(OPENSSL REQUIRED openssl)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAAMP_VANILLA_AES_SUPPORT")

if(CMAKE_QT5WEBKIT_JSBINDINGS)
	message("CMAKE_QT5WEBKIT_JSBINDINGS set")
	pkg_check_modules(Qt5WebKit REQUIRED Qt5WebKit)
	find_path (STAGING_INCDIR webkit-apis/ForwardingHeaders)
	include_directories(${STAGING_INCDIR}/webkit-apis/ForwardingHeaders)
else()
	message("CMAKE_QT5WEBKIT_JSBINDINGS not set")
	find_path (STAGING_INCDIR JavaScriptCore)
	include_directories(${STAGING_INCDIR}/JavaScriptCore)
endif()

if(CMAKE_AAMP_CC_ENABLED)
	message("CMAKE_AAMP_CC_ENABLED set")
	pkg_check_modules(DIRECTFB REQUIRED directfb)
endif()

# Mac OS X
if(CMAKE_SYSTEM_NAME STREQUAL Darwin)
    set(OS_CXX_FLAGS "${OS_CXX_FLAGS} -g -x objective-c++")
    set(OS_LD_FLAGS "${OS_LD_FLAGS} -framework Cocoa")
    string(STRIP ${OS_LD_FLAGS} OS_LD_FLAGS)
    set(AAMP_CLI_LD_FLAGS "${AAMP_CLI_LD_FLAGS} -lgstvideo-1.0")
    string(STRIP ${AAMP_CLI_LD_FLAGS} AAMP_CLI_LD_FLAGS)
    set(AAMP_OS_SOURCES cocoa_window.mm)
endif(CMAKE_SYSTEM_NAME STREQUAL Darwin)

find_package (Threads REQUIRED)

include_directories(${CMAKE_CURRENT_SOURCE_DIR} drm drm/ave drm/aes)
include_directories(${GSTREAMER_INCLUDE_DIRS})
include_directories(${CURL_INCLUDE_DIRS})
include_directories(${GSTREAMERBASE_INCLUDE_DIRS})
include_directories(${LIBDASH_INCLUDE_DIRS})
include_directories(${LibXml2_INCLUDE_DIRS})
include_directories(${OPENSSL_INCLUDE_DIRS})

set(AAMP_COMMON_SOURCES base16.cpp fragmentcollector_hls.cpp fragmentcollector_mpd.cpp streamabstraction.cpp _base64.cpp drm/ave/drm.cpp main_aamp.cpp aampgstplayer.cpp tsprocessor.cpp drm/aes/aamp_aes.cpp aamplogging.cpp)

if(CMAKE_CONTENT_METADATA_IPDVR_ENABLED)
	message("CMAKE_CONTENT_METADATA_IPDVR_ENABLED set")
	set(SEC_CLIENT_LIB -lSecClient )
	set(SEC_CONTENT_METADATA_ENABLED "-DAAMP_CONTENT_METADATA_IPDVR_ENABLED")
	set(AAMP_COMMON_SOURCES ${AAMP_COMMON_SOURCES} drm/ZeroDrmAccessAdapter.cpp)
elseif(CMAKE_USE_SECCLIENT)
	set(SEC_CLIENT_LIB -lSecClient )
endif()

if(CMAKE_USE_RDK_PLUGINS)
	message("CMAKE_USE_RDK_PLUGINS set")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_PLAYERSINKBIN")
	if(CMAKE_USE_OPENCDM)
		message("CMAKE_USE_OPENCDM set")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENCDM")
	endif()
endif()

set(AAMP_COMMON_DEPENDENCIES ${OS_LD_FLAGS} ${GSTREAMERBASE_LIBRARIES} ${GSTREAMER_LIBRARIES} ${CURL_LIBRARIES} ${LIBDASH_LIBRARIES} ${LibXml2_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${OPENSSL_LIBRARIES} ${AAMP_CLI_LD_FLAGS} -ldl -labr  -luuid ${SEC_CLIENT_LIB})

if(CMAKE_QT5WEBKIT_JSBINDINGS)
	message("CMAKE_QT5WEBKIT_JSBINDINGS set")
	set(LIBAAMP_SOURCES ${AAMP_COMMON_SOURCES} jsbindings/jsbindings.cpp jsbindings/jsutils.cpp jsbindings/jsmediaplayer.cpp jsbindings/jseventlistener.cpp jsbindings/jsevent.cpp)
	set(LIBAAMP_EXTRA_DEPENDENCIES " -l${Qt5WebKit_LIBRARIES}")
elseif(CMAKE_WPEWEBKIT_JSBINDINGS)
	message("CMAKE_WPEWEBKIT_JSBINDINGS set")
	set(LIBAAMP_SOURCES ${AAMP_COMMON_SOURCES} jsbindings/jsbindings.cpp jsbindings/jsutils.cpp jsbindings/jsmediaplayer.cpp jsbindings/jseventlistener.cpp jsbindings/jsevent.cpp)
else()
	message("CMAKE_WPEWEBKIT_JSBINDINGS and  CMAKE_WPEWEBKIT_JSBINDINGS not set")
	set(LIBAAMP_SOURCES ${AAMP_COMMON_SOURCES})
endif()

if(CMAKE_AVE_DRM)
	message("CMAKE_AVE_DRM set")
	set(LIBAAMP_EXTRA_DEPENDENCIES "${LIBAAMP_EXTRA_DEPENDENCIES} -laveadapter -lAVEPlayer")
	if(NOT CMAKE_QT5WEBKIT_JSBINDINGS AND CMAKE_WPEWEBKIT_JSBINDINGS)
		#set(LIBAAMP_EXTRA_DEPENDENCIES "${LIBAAMP_EXTRA_DEPENDENCIES} -lWPEWebKit")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAAMP_STUBS_FOR_JS")
		set(LIBAAMP_SOURCES ${LIBAAMP_SOURCES} drm/ave/StubsForAVEPlayer.cpp)
	endif()
	set(GSTAAMP_SOURCES "${GSTAAMP_SOURCES}" drm/ave/StubsForAVEPlayer.cpp)
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-multichar -std=c++11")

if(CMAKE_IARM_MGR)
	message("CMAKE_IARM_MGR set")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DIARM_MGR")
endif()

set(AAMP_CLI_SOURCES ${AAMP_COMMON_SOURCES} ${AAMP_OS_SOURCES})
set(GSTAAMP_SOURCES gstaamp.cpp gstaampsrc.cpp gstaampinit.cpp)
if(CMAKE_DASH_DRM)
	message("CMAKE_DASH_DRM set")
	if(CMAKE_USE_OPENCDM)
		set(AAMP_DRM_SOURCES drm/AampDRMSessionManager.cpp drm/AampDrmSession.cpp drm/opencdmsession.cpp drm/aampdrmsessionfactory.cpp drm/aampoutputprotection.cpp drm/AampDRMutils.cpp)
	else()
		set(AAMP_DRM_SOURCES drm/AampDRMSessionManager.cpp drm/AampDrmSession.cpp drm/playreadydrmsession.cpp drm/aampdrmsessionfactory.cpp drm/aampoutputprotection.cpp drm/AampDRMutils.cpp)
	endif()
	set(GSTAAMP_SOURCES "${GSTAAMP_SOURCES}" drm/ave/StubsForAVEPlayer.cpp)
	set(GSTAAMP_SOURCES "${GSTAAMP_SOURCES}" drm/gst/gstaampcdmidecryptor.cpp drm/gst/gstaampplayreadydecryptor.cpp drm/gst/gstaampwidevinedecryptor.cpp)
	set(LIBAAMP_SOURCES "${LIBAAMP_SOURCES}" "${AAMP_DRM_SOURCES}")
	set(AAMP_CLI_SOURCES "${AAMP_CLI_SOURCES}" "${AAMP_DRM_SOURCES}")
endif()

add_library(aamp SHARED ${LIBAAMP_SOURCES})
add_executable(aamp-cli ${AAMP_CLI_SOURCES})
add_executable(playbintest test/playbintest.cpp)

if(CMAKE_DASH_DRM)
	set(AAMP_COMMON_DEPENDENCIES "${AAMP_COMMON_DEPENDENCIES} -lIARMBus -lds -ldshalcli -lsystemd")
	if(CMAKE_USE_OPENCDM)
		if (DEFINED SECAPI_ENGINE_BROADCOM_SAGE)
			add_definitions( -DUSE_SECAPI_BRCMHW=1 )
			if(DEFINED SAGE_SVP)
				add_definitions (-DUSE_SAGE_SVP)
				target_link_libraries (aamp ${AAMP_COMMON_DEPENDENCIES}${LIBAAMP_EXTRA_DEPENDENCIES} -locdm -lb_secbuf -lnexus -lbrcmsvpmeta -lsec_api )
				target_link_libraries (aamp-cli ${AAMP_COMMON_DEPENDENCIES} -locdm -lb_secbuf -lnexus -lbrcmsvpmeta -lsec_api)
			else()
				target_link_libraries (aamp ${AAMP_COMMON_DEPENDENCIES}${LIBAAMP_EXTRA_DEPENDENCIES} -locdm -lsec_api)
				target_link_libraries (aamp-cli ${AAMP_COMMON_DEPENDENCIES} -locdm -lsec_api)
			endif()
		elseif(DEFINED SECAPI_ENGINE_BROADCOM_RAAGA)
			add_definitions( -DUSE_SECAPI_BRCMHW=1 )
			target_link_libraries (aamp ${AAMP_COMMON_DEPENDENCIES}${LIBAAMP_EXTRA_DEPENDENCIES} -locdm -lsec_api)
			target_link_libraries (aamp-cli ${AAMP_COMMON_DEPENDENCIES} -locdm -lsec_api)
		else()
			target_link_libraries (aamp ${AAMP_COMMON_DEPENDENCIES}${LIBAAMP_EXTRA_DEPENDENCIES} -locdm -lsec_api_crypto)
			target_link_libraries (aamp-cli ${AAMP_COMMON_DEPENDENCIES} -locdm -lsec_api_crypto)
		endif()
		find_path (STAGING_INCDIR opencdm)
		include_directories(${STAGING_INCDIR}/opencdm)
	else()
		if (DEFINED SECAPI_ENGINE_BROADCOM_SAGE)
			add_definitions( -DUSE_SECAPI_BRCMHW=1 )
			if(DEFINED SAGE_SVP)
				add_definitions (-DUSE_SAGE_SVP)
				target_link_libraries (aamp ${AAMP_COMMON_DEPENDENCIES}${LIBAAMP_EXTRA_DEPENDENCIES} -lplayready -lsec_api -lb_secbuf -lnexus -lbrcmsvpmeta )
				target_link_libraries (aamp-cli ${AAMP_COMMON_DEPENDENCIES} -lplayready -lsec_api -lb_secbuf -lnexus -lbrcmsvpmeta )
			else()
				target_link_libraries (aamp ${AAMP_COMMON_DEPENDENCIES}${LIBAAMP_EXTRA_DEPENDENCIES} -lplayready -lsec_api )
				target_link_libraries (aamp-cli ${AAMP_COMMON_DEPENDENCIES} -lplayready -lsec_api )
			endif()
		elseif(DEFINED SECAPI_ENGINE_BROADCOM_RAAGA)
			add_definitions( -DUSE_SECAPI_BRCMHW=1 )
			target_link_libraries (aamp ${AAMP_COMMON_DEPENDENCIES}${LIBAAMP_EXTRA_DEPENDENCIES} -lplayready -lsec_api )
			target_link_libraries (aamp-cli ${AAMP_COMMON_DEPENDENCIES} -lplayready -lsec_api )
		else()
			target_link_libraries (aamp ${AAMP_COMMON_DEPENDENCIES}${LIBAAMP_EXTRA_DEPENDENCIES} -lplayready -lsec_api_crypto)
			target_link_libraries (aamp-cli ${AAMP_COMMON_DEPENDENCIES} -lplayready -lsec_api_crypto )
		endif()
		find_path (STAGING_INCDIR playready)
		find_path (STAGING_INCDIR playready/oem/common/inc)
		find_path (STAGING_INCDIR playready/oem/ansi/inc)
		include_directories(${STAGING_INCDIR}/playready)
		include_directories(${STAGING_INCDIR}/playready/oem/common/inc)
		include_directories(${STAGING_INCDIR}/playready/oem/ansi/inc)
	endif()
	set(AAMP_DEFINES "${AAMP_DEFINES} -DAAMP_MPD_DRM=1 -DDRM_BUILD_PROFILE=DRM_BUILD_PROFILE_OEM -DTARGET_LITTLE_ENDIAN=1 -DTARGET_SUPPORTS_UNALIGNED_DWORD_POINTERS=0 ${SEC_CONTENT_METADATA_ENABLED}")
else()
	message("CMAKE_DASH_DRM not set")
	target_link_libraries (aamp ${AAMP_COMMON_DEPENDENCIES}${LIBAAMP_EXTRA_DEPENDENCIES})
	target_link_libraries (aamp-cli ${AAMP_COMMON_DEPENDENCIES})
endif()

target_link_libraries (playbintest ${AAMP_COMMON_DEPENDENCIES})

if(CMAKE_AAMP_CC_ENABLED)
	message("CMAKE_AAMP_CC_ENABLED set")
	#Enable CC support in gstreamer aamp plugin
	include_directories(${DIRECTFB_INCLUDE_DIRS})
	include_directories(${DIRECTFB_INCLUDE_DIRS}/fusion)
	include_directories(${DIRECTFB_INCLUDE_DIRS}/direct)
	target_link_libraries(aamp -lrdkCCReader -lrdkCCManager -lrdkCCGfx ${DIRECTFB_LIBRARIES})
	set(LIBAAMP_DEFINES "${AAMP_DEFINES} -DAAMP_CC_ENABLED")
else()
	message("CMAKE_AAMP_CC_ENABLED not set")
	set(LIBAAMP_DEFINES "${AAMP_DEFINES}")
endif()

if(CMAKE_SOC_PLATFORM_INTEL)
	message("CMAKE_SOC_PLATFORM_INTEL set")
	target_link_libraries(aamp "-lismd_core -lismd_vidpproc -lismd_vidsink_direct -lismd_vidrend -lismd_viddec  -lismd_core -lsysloghelper")
	target_link_libraries(aamp-cli "-lsysloghelper")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DINTELCE=1 -DAAMP_STOP_SINK_ON_SEEK=1 -DUSE_SYSLOG_HELPER_PRINT=1")
endif()

if(CMAKE_SYSTEMD_JOURNAL)
    message("CMAKE_SYSTEMD_JOURNAL set")
    set(AAMP_COMMON_DEPENDENCIES "${AAMP_COMMON_DEPENDENCIES} -lsystemd")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_SYSTEMD_JOURNAL_PRINT=1 -DSD_JOURNAL_SUPPRESS_LOCATION=1")
    target_link_libraries (aamp ${AAMP_COMMON_DEPENDENCIES} )
    target_link_libraries (aamp-cli ${AAMP_COMMON_DEPENDENCIES})
endif()

if(CMAKE_AVE_DRM)
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DAVE_DRM")
endif()

if(CMAKE_USE_SECCLIENT)
	message("CMAKE_USE_SECCLIENT set")
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DUSE_SECCLIENT")
endif()

set_target_properties(aamp PROPERTIES COMPILE_FLAGS "${LIBAAMP_DEFINES}")
set_target_properties(aamp-cli PROPERTIES COMPILE_FLAGS "${OS_CXX_FLAGS} ${AAMP_DEFINES} -DSTANDALONE_AAMP")
set_target_properties(aamp PROPERTIES PUBLIC_HEADER "main_aamp.h")
set_target_properties(aamp PROPERTIES PRIVATE_HEADER "priv_aamp.h")

install(TARGETS aamp-cli DESTINATION bin)
install(TARGETS playbintest DESTINATION bin)

install(TARGETS aamp DESTINATION lib PUBLIC_HEADER DESTINATION include PRIVATE_HEADER DESTINATION include)
install(FILES drm/AampDRMSessionManager.h drm/AampDrmSession.h drm/AampDRMutils.h drm/aampdrmsessionfactory.h DESTINATION include)

if(CMAKE_WPEWEBKIT_JSBINDINGS)
	message("CMAKE_WPEWEBKIT_JSBINDINGS set")
	add_subdirectory(test)
	add_library(aampjsbindings SHARED jsbindings/jscontroller-jsbindings.cpp)
	target_link_libraries (aampjsbindings aamp)
	install(TARGETS aampjsbindings DESTINATION lib)
	set(LIBAAMP_DEFINES "${LIBAAMP_DEFINES} -DAAMP_JSCONTROLLER_ENABLED")
	if(CMAKE_AAMP_CC_ENABLED)
		set_target_properties(aampjsbindings PROPERTIES COMPILE_FLAGS "-DAAMP_CC_ENABLED")
	endif()
endif()
